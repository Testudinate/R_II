Императивное vs. декларативное программирование

Вырезки из статьи:

1. "Ровно год назад мы хорошо подискутировали с одним человеком о том, что часто введение 
 дополнительных ограничений в язык программирования дает больше свободы. 
 
 Так лозунг "нет goto!" привел к структурному программированию, 
 "код в модули!" - к модульному, 
 "код в классы!" - к ООП. 
 
 Следующее на очереди - функциональное программирование с лозунгом "функция это тоже аргумент и результат" и "все функции чистые". 
 
 2. Часто функциональные программирование отождествляют с декларативным, противопоставляя его традиционному императивному. 
 Пол года назад я понял, что до сих пытаюсь писать в императивном стиле даже с использованием функциональных нововведений.
 
 Если представить программу в виде графа выполнений 
 (узлы - это данные или операции, а переходы - это трансфер данных), то дополнительные ограничения к языку программирования 
 - это всего лишь требования к виду графа. 
 Эти требования помогают де юре исключить сложные ситуации или дают компилятору свободу в выборе способа исполнения программы. 
 
 В идеальном функциональном языке, казалось бы, странный запрет "после присваивания переменная не может менять своего значения" 
 приводит к отсутствию циклов в графе, то есть отсутствию зацикливания по определению.
 
 Чистые функциональные языки типа F# существуют, но их область применения ограничена. 
 Как минимум, функция ввода данных от пользователя не является чистой 
 (результат вычисления зависит только от параметров). 
 Она возвращает каждый раз разные значения, не зависящие от входных параметров. 
 Поэтому речь идет лишь о поддержке функциональных возможностей в традиционных языках. 
 Так в C# поддерживаются 
    анонимные функции, 
    лямбда-выражения, 
    итераторы, 
    LINQ. 
  
  Анонимные функции и итераторы также доступны в PHP и JavaScript. 
  
  Всех этих возможностей уже достаточно, чтобы привести часть программы к декларативному виду.
  
  3. Итак две противоположности:
  
  Императивное программирование. Описывает процесс вычисления в виде заданной последовательности инструкций, 
  изменяющих состояние программы.
  
  Декларативное программирование. Описывает процесс каково нечто, а не как его создать. 
  Порядок выполнения и способ достижения не важен.
  
  3.1 Примером декларативного языка служит HTML, описывающий содержание страницы, 
  а не способ её отображения на экране.
  
  3.2 Популярный сборщик пакетов Maven описывает лишь зависимости между пакетами, 
  а не последовательность их установки. 
  
  3.3 Язык запросов SQL описывает, что мы хотим достать из базы данных, как именно решает сервер. 
  
  Декларативное описание задачи более наглядно и легче формулируется, так как мы чаще знаем, 
  чего хотим, но не знаем как сделать.
  
  Базовой операцией при декларативном подходе является операция над множеством или над всеми элементами множества. 
  Причем для последнего случая порядок обработки не важен, так как обрабатывающая функция должна быть чистой. 
  В C#, PHP, Java, Javascript множество реализуется как массив или последовательность, генерируемая итератором. 
  
  3.4 Ниже пример сравнения двух подходов на C#
  
  3.4.1 Императивный подход
  
  // основной код
  int F(int x) { return x*x; }

  int sum = 0;
  for (int i=0; i<arg.Length; i++)
  {
    if (arg[i] > 10) sum += F(arg[i]);
  }
  
  3.4.2 Декларативный подход
  // основной код
  int F(int x) { return x*x; }

  int sum = arg.Where(x => x > 10).Sum(F);
  
  // код функций над множествами (входит в стандартную библиотеку)
  ...
  IEnumerable<F> Where(this IEnumerable<F> sequence, Func<F, bool> filter)
  {
    foreach (F x in sequence) { if (filter(x)) { yield return x; } }
  }
  int Sum(this IEnumerable<int> sequence, Func<int, bool> func)
  {
    int sum = 0;
    foreach (int x in sequence) { sum += func(x); }
    return sum;
  }

4. Теперь сравним два решения
4.1 Связность. 

Слева бизнес-логика перемешана с реализацией. 
Справа реализация суммирования и фильтрации вынесена в отдельные методы, а в основном коде осталась только бизнес-логика. 
Это имеет ряд преимуществ:

4.1.1 интерпретация. Здесь простой пример, но можно без труда придумать более сложные случаи получения и обработки данных, 
      когда понять код за долю секунды не так просто.
4.1.2 модификация. Чтобы добавить слева условие отбора, потребуется перестроить структуру уже существующего кода. 
      Справа же надо только добавить очередной вызов метода Where(). 
      Например, int sum = arg.Where(x => x > 10).Where(x => x % 2 == 0).Sum(F);
4.1.3 тестирование. Справа функции суммирования и фильтрации легко тестируются отдельно, слева это невозможно.
4.1.4 оптимизация. Если мы вдруг захотим использовать многоядерные процессоров, то справа надо будет всего лишь переписать 
      методы Sum, Where и не трогать бизнес-логику.

4.2 повторное использование кода. Функции над множествами можно легко использовать повторно для других последовательностей, 
    а если учесть, что многие из них написаны для generic, то и для последовательностей произвольного типа.
4.3 производительность. Может показаться, что кажущаяся избыточность кода приводит к потере производительности. 
    Это только кажется, так как накладные расходы при организации итераторов сравнимы с использованием рекурсии 
    (на сохранение локальных переменных в стеке). А это очень мало.
    
Теперь я стараюсь и на C#, и на PHP не бояться итераторов и обрабатывать множества соответствующими функциями, 
чем делать сложные циклы. 

Также библиотека jQuery имеет всё для удобного написания кода на JavaScript в декларативном стиле.
